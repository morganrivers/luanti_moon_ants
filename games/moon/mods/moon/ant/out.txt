-- ant/constants.lua
local C = {}

C.initial_properties = {
	physical               = true,
	collide_with_objects   = true,
	collisionbox           = {-0.3, -0.01, -0.3, 0.3, 0.25, 0.3},
	visual                 = "sprite",
	textures               = {"ant.png"},
	visual_size            = {x = 1.2, y = 1.2},
	nametag                = "Rover Unit",
	nametag_color          = "#00AAFF",
	is_visible             = true,
}

-- tweakable tunables
C.STEP_BEFORE_TURN   = 10
C.DIG_COOLDOWN_SEC   = 1.0
C.INVENTORY_CAPACITY = 3
C.HUB_SEARCH_RADIUS  = 20
C.RESOURCE_SCAN_RADIUS = 8
C.HUB_REGOLITH_THRESHOLD = 20   -- above this: ignore regolith
C.SPARE_BLOCKS           = 1    -- keep after deposit
C.CLIMB_WANDER_STEPS = 10      -- how long to forget x‑z once underneath

return C


-- moon/ant/digging.lua
--  All terrain‑interaction helpers for the rover entity
-----------------------------------------------------------

local C = dofile(minetest.get_modpath(minetest.get_current_modname())
                 .."/ant/constants.lua")

local D = {}

------------------------------------------------------------------
--  FINDERS
------------------------------------------------------------------
function D.find_ice(self, radius)
	radius = radius or C.RESOURCE_SCAN_RADIUS
	local pos = self.object:get_pos();  if not pos then return nil end

	local best, bestd = nil, radius+1
	for x=-radius, radius do
		for y=-radius, radius do
			for z=-radius, radius do
				local p = vector.add(pos,{x=x,y=y,z=z})
				local n = minetest.get_node_or_nil(p)
				if n and n.name == "moon:ice_rock" then
					local d = vector.distance(pos,p)
					if d < bestd then best,bestd = p,d end
				end
			end
		end
	end
	return best
end

function D.find_metal_ore(self, radius)
	radius = radius or C.RESOURCE_SCAN_RADIUS
	local pos = self.object:get_pos();  if not pos then return nil end

	local best, bestd = nil, radius+1
	for x=-radius, radius do
		for y=-radius, radius do
			for z=-radius, radius do
				local p = vector.add(pos,{x=x,y=y,z=z})
				local n = minetest.get_node_or_nil(p)
				if n and n.name == "moon:metal_ore" then
					local d = vector.distance(pos,p)
					if d < bestd then best,bestd = p,d end
				end
			end
		end
	end
	return best
end

------------------------------------------------------------------
--  DIRECTIONAL DIG HELPERS  (identical logic, different targets)
------------------------------------------------------------------
local function dig_toward(self, goal_pos, reward_ice, reward_metal)
	local pos = self.object:get_pos(); if not pos or not goal_pos then return false end
	pos = {x=math.floor(pos.x+0.5), y=math.floor(pos.y+0.5), z=math.floor(pos.z+0.5)}

	-- choose biggest component → cardinal step
	local dir      = vector.direction(pos, goal_pos); dir.y = 0
	local step_dir = (math.abs(dir.x) > math.abs(dir.z))
	                 and {x=(dir.x>0 and 1 or -1),y=0,z=0}
	                 or  {x=0,y=0,z=(dir.z>0 and 1 or -1)}

	self.current_direction = step_dir
	self.object:set_yaw(minetest.dir_to_yaw(step_dir))

	local front = vector.add(pos, step_dir)
	local node  = minetest.get_node(front)
	if node.name ~= "air" then minetest.dig_node(front) end
	self.object:set_pos(front)

	-- book‑keeping
	if reward_ice  and node.name == "moon:ice_rock"   then self.inventory.ice   = self.inventory.ice+1  end
	if reward_metal and node.name == "moon:metal_ore" then self.inventory.metal = self.inventory.metal+1 end
	return true
end

function D.dig_toward_ice(self, ice_pos)
	self.target_pos = ice_pos
	return dig_toward(self, ice_pos,  true, false)
end
function D.dig_toward_metal(self, ore_pos)
	self.target_pos = ore_pos
	return dig_toward(self, ore_pos,  false,true)
end
local function must_climb(self, pos)
   if not self.target_pos then return false end
   return self.target_pos.y > pos.y + 0.1      -- 0.1 ⇒ tolerance
end
local function vertical_intent(self, pos)
    if not self.target_pos then return nil end
    local dy = self.target_pos.y - pos.y
    if math.abs(dy) < 0.5 then return nil end          -- same height
    return (dy > 0) and "up" or "down"
end

function D.dig_block(self)
    local pos = self.object:get_pos()
    if not pos then return false end
    
    -- vertical intention for this step
    local vmode = vertical_intent(self, pos)   -- "up", "down", or nil

    -- Round to nearest block center
    pos = {
        x = math.floor(pos.x + 0.5),
        y = math.floor(pos.y + 0.5),
        z = math.floor(pos.z + 0.5)
    }
    
    -- Calculate target position in front of rover
    local front_pos = {
        x = pos.x + self.current_direction.x,
        y = pos.y,  -- Same level
        z = pos.z + self.current_direction.z
    }
    
    -- Try to move on the same level first if path is clear
    local node = minetest.get_node(front_pos)
    if node and node.name == "air" then
        -- Path is clear, move forward
        self.object:set_pos(front_pos)
        self.steps_taken = self.steps_taken + 1
        
        -- Check for turn condition
        if self.steps_taken >= 10 and not self.returning then
            self:turn_90_degrees()
        end
        return true
    end
    
    -- Path is blocked - first try to climb up (prioritize climbing over digging)
    local up_front_pos = {
        x = front_pos.x,
        y = front_pos.y + 1,  -- One block higher
        z = front_pos.z
    }
    
    local node_up_front = minetest.get_node(up_front_pos)
    local node_above = minetest.get_node({x=pos.x, y=pos.y+1, z=pos.z})
    
    -- Check if we can climb up (need free space at head level and in front)
    if node_up_front.name == "air" and node_above.name == "air" then
        -- We can climb up - there's space for us to move up and forward
        self.object:set_pos(up_front_pos)
        self.steps_taken = self.steps_taken + 1
        
        -- Check turn condition
        if self.steps_taken >= 10 and not self.returning then
            self:turn_90_degrees()
        end
        return true
    end
    
    -- ① the whole “Path is blocked – first try to climb up …” section
    if must_climb(self, pos) then

	    -- If we can't climb naturally, try digging up to create a path
	    if node_up_front.name ~= "air" then
	        local diggable_up = (node_up_front.name == "moon:regolith" or 
	                          node_up_front.name == "default:stone" or 
	                          node_up_front.name == "moon:bedrock" or
	                          node_up_front.name == "moon:metal_ore" or
	                          node_up_front.name == "moon:ice_rock")
	        
	        -- Also check the block above our head
	        local diggable_above = false
	        if node_above.name ~= "air" then
	            diggable_above = (node_above.name == "moon:regolith" or 
	                            node_above.name == "default:stone" or 
	                            node_above.name == "moon:bedrock" or
	                            node_above.name == "moon:metal_ore" or
	                            node_above.name == "moon:ice_rock")
	        end
	        
	        -- If both blocks are diggable, create a path upward
	        if diggable_up and (node_above.name == "air" or diggable_above) then
	            -- Save the node type before digging
	            local up_front_node_name = node_up_front.name
	            
	            -- Dig the block in front at higher level
	            minetest.dig_node(up_front_pos)
	            
	            -- Check what resource we collected from upward dig
	            if up_front_node_name == "moon:metal_ore" then
	                self.inventory.metal = self.inventory.metal + 1
	            elseif up_front_node_name == "moon:ice_rock" then
	                self.inventory.ice = self.inventory.ice + 1
	            else
	            	if (not self.hub_regolith_high) and (self.inventory.regolith < self.max_regolith) then
	            	    self.inventory.regolith = self.inventory.regolith + 1
	            	end
	            end
	            
	            -- Dig the block above us if needed
	            if node_above.name ~= "air" then
	                local above_node_name = node_above.name
	                minetest.dig_node({x=pos.x, y=pos.y+1, z=pos.z})
	                
	                -- Check what resource we collected from above head
	                if above_node_name == "moon:metal_ore" then
	                    self.inventory.metal = self.inventory.metal + 1
	                elseif above_node_name == "moon:ice_rock" then
	                    self.inventory.ice = self.inventory.ice + 1
	                else
	                    -- Normal regolith or stone
	                    if (not self.hub_regolith_high) and (self.inventory.regolith < self.max_regolith) then
	                        self.inventory.regolith = self.inventory.regolith + 1
	                    end
	                end
	            end
	            
	            -- Add particles for digging
	            minetest.add_particlespawner({
	                amount = 15,
	                time = 0.5,
	                minpos = {x=up_front_pos.x-0.2, y=up_front_pos.y-0.2, z=up_front_pos.z-0.2},
	                maxpos = {x=up_front_pos.x+0.2, y=up_front_pos.y+0.2, z=up_front_pos.z+0.2},
	                minvel = {x=-0.5, y=0.5, z=-0.5},
	                maxvel = {x=0.5, y=1, z=0.5},
	                minacc = {x=0, y=0, z=0},
	                maxacc = {x=0, y=0, z=0},
	                minexptime = 0.5,
	                maxexptime = 1,
	                minsize = 1,
	                maxsize = 2,
	                collisiondetection = false,
	                texture = "moon_regolith.png",
	            })
	            
	            -- Climb up and forward
	            self.object:set_pos(up_front_pos)
	            self.steps_taken = self.steps_taken + 1
	            
	            -- Check inventory and turn conditions
	            if self.inventory.regolith + self.inventory.metal + self.inventory.ice >= self.max_regolith then
	                self.returning = true
	            elseif self.steps_taken >= 10 and not self.returning then
	                self:turn_90_degrees()
	            end
	            
	            return true
	        end
	    end
	end

    -- If we can't climb up, then try to dig forward on the same level
    if node and node.name ~= "air" then
        local diggable = (node.name == "moon:regolith" or 
                         node.name == "default:stone" or 
                         node.name == "moon:bedrock" or
                         node.name == "moon:metal_ore" or
                         node.name == "moon:ice_rock")
        
        if diggable then
            -- Save the node type before digging
            local node_name = node.name
            
            -- Dig the block
            minetest.dig_node(front_pos)
            
            -- Check what resource we collected
            if node_name == "moon:metal_ore" then
                self.inventory.metal = self.inventory.metal + 1
            elseif node_name == "moon:ice_rock" then
                self.inventory.ice = self.inventory.ice + 1
            else
                -- Normal regolith or stone
                if (not self.hub_regolith_high) and (self.inventory.regolith < self.max_regolith) then
                    self.inventory.regolith = self.inventory.regolith + 1
                end
            end
            
            -- Add particle effects
            minetest.add_particlespawner({
                amount = 10,
                time = 0.5,
                minpos = {x=front_pos.x-0.2, y=front_pos.y, z=front_pos.z-0.2},
                maxpos = {x=front_pos.x+0.2, y=front_pos.y+0.3, z=front_pos.z+0.2},
                minvel = {x=-0.5, y=0.5, z=-0.5},
                maxvel = {x=0.5, y=1, z=0.5},
                minacc = {x=0, y=0, z=0},
                maxacc = {x=0, y=0, z=0},
                minexptime = 0.5,
                maxexptime = 1,
                minsize = 1,
                maxsize = 2,
                collisiondetection = false,
                texture = "moon_regolith.png",
            })
            
            -- Move into the dug area
            self.object:set_pos(front_pos)
            self.steps_taken = self.steps_taken + 1
            
            -- Check inventory and turn conditions
            if self.inventory.regolith + self.inventory.metal + self.inventory.ice >= self.max_regolith then
                self.returning = true
            elseif self.steps_taken >= 10 and not self.returning then
                self:turn_90_degrees()
            end
            
            return true
        end
    end
    
    -- If digging failed and we have blocks, try to place a block to create stairs
    if must_climb(self, pos) and self.inventory.regolith > 0 and not self.returning then
        return self:place_block_for_climbing()
    end

    -- If we need to go DOWN toward the goal, dig a staircase
    if vmode == "down" then
        return self:dig_down_step()
    end

    -- If all else fails, try turning
    self:turn_90_degrees()
    return false
end


-- Place a block to create a stairway for climbing
function D.place_block_for_climbing(self)
    local pos = self.object:get_pos()
    if not pos then return false end
    
    -- Round to nearest block center
    pos = {
        x = math.floor(pos.x + 0.5),
        y = math.floor(pos.y + 0.5),
        z = math.floor(pos.z + 0.5)
    }
    
    -- Calculate target position in front of rover
    local front_pos = {
        x = pos.x + self.current_direction.x,
        y = pos.y,  -- Same level
        z = pos.z + self.current_direction.z
    }
    
    -- Check if the space is air (we can place a block)
    local node = minetest.get_node(front_pos)
    if node.name == "air" then
        -- Also check if there's something solid below
        local below_pos = {x=front_pos.x, y=front_pos.y-1, z=front_pos.z}
        local node_below = minetest.get_node(below_pos)
        
        -- Only place if there's a solid block below (no floating blocks)
        if node_below.name ~= "air" then
            -- Place regolith block
            minetest.set_node(front_pos, {name="moon:regolith"})
            
            -- Use one block from inventory
            self.inventory.regolith = self.inventory.regolith - 1
            
            -- Add particle effect for placing
            minetest.add_particlespawner({
                amount = 8,
                time = 0.3,
                minpos = {x=front_pos.x-0.3, y=front_pos.y-0.3, z=front_pos.z-0.3},
                maxpos = {x=front_pos.x+0.3, y=front_pos.y+0.3, z=front_pos.z+0.3},
                minvel = {x=-0.1, y=0.1, z=-0.1},
                maxvel = {x=0.1, y=0.3, z=0.1},
                minacc = {x=0, y=0, z=0},
                maxacc = {x=0, y=0, z=0},
                minexptime = 0.3,
                maxexptime = 0.6,
                minsize = 1,
                maxsize = 2,
                collisiondetection = false,
                texture = "moon_regolith.png",
            })
            
            minetest.log("action", "[ROVER MOD] Rover placed a block to create a path")
            
            -- Now we can check if we can climb
            local up_front_pos = {x=front_pos.x, y=front_pos.y+1, z=front_pos.z}
            
            -- Make sure there's headroom
            local node_up_front = minetest.get_node(up_front_pos)
            if node_up_front.name == "air" then
                -- Now check if there's headroom above us
                local node_above = minetest.get_node({x=pos.x, y=pos.y+1, z=pos.z})
                
                if node_above.name == "air" then
                    -- We can climb up - there's space for us
                    self.object:set_pos(up_front_pos)
                    self.steps_taken = self.steps_taken + 1
                    
                    -- Check turn condition
                    if self.steps_taken >= 10 and not self.returning then
                        self:turn_90_degrees()
                    end
                    
                    return true
                else
                    -- Need to dig above us first
                    local diggable = (node_above.name == "moon:regolith" or 
                                    node_above.name == "default:stone" or 
                                    node_above.name == "moon:bedrock")
                    
                    if diggable then
                        minetest.dig_node({x=pos.x, y=pos.y+1, z=pos.z})
                        if (not self.hub_regolith_high) and (self.inventory.regolith < self.max_regolith) then
                            self.inventory.regolith = self.inventory.regolith + 1
                        end

                        
                        -- Now we can climb
                        self.object:set_pos(up_front_pos)
                        self.steps_taken = self.steps_taken + 1
                        
                        return true
                    end
                end
            end
        end
    end
    
    return false
end

function D.dig_down_step(self)
   local pos = self.object:get_pos(); if not pos then return false end
   pos = {x = math.floor(pos.x+0.5), y = math.floor(pos.y+0.5), z = math.floor(pos.z+0.5)}

   local below = {x=pos.x, y=pos.y-1, z=pos.z}
   local node  = minetest.get_node(below)

   if node.name ~= "air" then
       -- dig the tread block
       minetest.dig_node(below)
   end

   -- step down
   self.object:set_pos(below)
   self.steps_taken = self.steps_taken + 1
   return true
end

return D
-- ant/entity.lua
local modpath = minetest.get_modpath(minetest.get_current_modname())

local C   = dofile(modpath.."/ant/constants.lua")
local move= dofile(modpath.."/ant/movement.lua")
local dig = dofile(modpath.."/ant/digging.lua")
local res = dofile(modpath.."/ant/resource.lua")

local ant = {
	-- -------- static fields ----------
	initial_properties = C.initial_properties,

	-- -------- dynamic state ----------
	steps_taken   = 0,
	current_direction = nil,
	dig_cooldown  = 0,
	max_regolith  = C.INVENTORY_CAPACITY,
	returning     = false,
	inventory     = {regolith=0, metal=0, ice=0},
	climb_wander     = 0,    -- >0 ⇒ in vertical‑climb mode
	down_stair_mode  = false,
}

-----------------------------------------------------------------
-- Blend in the behaviour tables
table.extend(ant, move)
table.extend(ant, dig)
table.extend(ant, res)
-----------------------------------------------------------------

-- on_activate is short and sweet now
function ant.on_activate(self, staticdata)
	minetest.log("action", "[ROVER MOD] Rover unit activated")
	self.object:set_acceleration({x=0, y=-1, z=0}) -- gentle gravity
	self.object:set_properties({physical=true, collide_with_objects=true,
		collisionbox=C.initial_properties.collisionbox})
	self:choose_initial_direction()
end

function ant.deposit_resources(self, hub_pos)
	local meta = minetest.get_meta(hub_pos)

	-- how many regolith blocks we actually drop off?
	local spare   = C.SPARE_BLOCKS
	local dropreg = math.max(0, self.inventory.regolith - spare)

	meta:set_int("regolith", meta:get_int("regolith") + dropreg)
	meta:set_int("metal",    meta:get_int("metal")    + self.inventory.metal)
	meta:set_int("ice",      meta:get_int("ice")      + self.inventory.ice)

	-- keep our spare blocks
	self.inventory.regolith = math.min(self.inventory.regolith, spare)
	self.inventory.metal    = 0
	self.inventory.ice      = 0

    -- Update hub inventory counters
    local regolith = meta:get_int("regolith") + self.inventory.regolith
    local metal = meta:get_int("metal") + self.inventory.metal
    local ice = meta:get_int("ice") + self.inventory.ice
    
    -- Add visual effects for deposit
    minetest.add_particlespawner({
        amount = 10,
        time = 0.5,
        minpos = {x=hub_pos.x-0.5, y=hub_pos.y, z=hub_pos.z-0.5},
        maxpos = {x=hub_pos.x+0.5, y=hub_pos.y+1, z=hub_pos.z+0.5},
        minvel = {x=-0.3, y=0.3, z=-0.3},
        maxvel = {x=0.3, y=0.8, z=0.3},
        minacc = {x=0, y=0, z=0},
        maxacc = {x=0, y=0, z=0},
        minexptime = 0.8,
        maxexptime = 1.5,
        minsize = 1,
        maxsize = 2,
        collisiondetection = false,
        texture = "moon_regolith.png",
    })
    
    -- Store updated values
    meta:set_int("regolith", regolith)
    meta:set_int("metal", metal)
    meta:set_int("ice", ice)
    
    -- Update hub infotext
    local energy = moon_energy and moon_energy.get(hub_pos) or 0
    
    meta:set_string("infotext", string.format(
        "Fabrication Hub\nRegolith: %d\nMetal: %d\nIce: %d\nEnergy: %d EU",
        regolith, metal, ice, energy
    ))
    
    -- Log deposit
    minetest.log("action", "[ROVER MOD] Rover deposited resources at hub")
    
    -- Empty rover inventory
    self.inventory.regolith = 0
    self.inventory.metal = 0
    self.inventory.ice = 0
    
    return true
end

function ant.on_step(self, dtime)
    ---------------------------------------------------------------
    -- 0.  Choose / update target                                   
    ---------------------------------------------------------------
    local hub_pos = self:find_nearest_hub()
    local priority_resource = nil

    if hub_pos then
        local meta           = minetest.get_meta(hub_pos)
        local regolith_count = meta:get_int("regolith") or 0
        local metal_count    = meta:get_int("metal")    or 0
        local ice_count      = meta:get_int("ice")      or 0

        self.hub_regolith_high = regolith_count >= C.HUB_REGOLITH_THRESHOLD

        if not self.hub_regolith_high then
            if ice_count  <= metal_count and ice_count  <= regolith_count then
                priority_resource = "ice"
            elseif metal_count <= regolith_count then
                priority_resource = "metal"
            else
                priority_resource = "regolith"
            end
        end
    end

    -- when we are in climb‑wander mode just count down
    if self.climb_wander > 0 then
        self.climb_wander = self.climb_wander - 1
        if self.climb_wander == 0 then self.target_pos = nil end
    end

    ---------------------------------------------------------------
    -- 1.  Acquire a fresh target if needed                        
    ---------------------------------------------------------------
    if self.target_pos == nil and priority_resource ~= nil then
        if priority_resource == "ice" then
            self.target_pos = self:find_ice()
        elseif priority_resource == "metal" then
            self.target_pos = self:find_metal_ore()
        end
    end

    ---------------------------------------------------------------
    -- 2.  If we are directly beneath target and need to climb     
    ---------------------------------------------------------------
    if self.target_pos then
        local pos = self.object:get_pos()
        local dx  = math.abs(self.target_pos.x - pos.x)
        local dz  = math.abs(self.target_pos.z - pos.z)

        if dx < 0.5 and dz < 0.5 and self.target_pos.y > pos.y + 0.5 then
            -- reached column, start wander‑climb mode
            self.climb_wander = C.CLIMB_WANDER_STEPS
            self:pick_random_horizontal()
        end

        -- reached final height too → clear target
        if math.abs(self.target_pos.y - pos.y) < 0.5 and dx < 0.5 and dz < 0.5 then
            self.target_pos, self.climb_wander = nil, 0
        end
    end

    ---------------------------------------------------------------
    -- 3.  Move toward target (if one) else wander                 
    ---------------------------------------------------------------
    if self.target_pos and self.climb_wander == 0 then
        local pos = self.object:get_pos()
        if self.target_pos then
            local dir = vector.direction(pos, self.target_pos); dir.y = 0
            local cardinal = (math.abs(dir.x) > math.abs(dir.z))
                             and {x=(dir.x>0 and 1 or -1),y=0,z=0}
                             or  {x=0,y=0,z=(dir.z>0 and 1 or -1)}
            self.current_direction = cardinal
            self.object:set_yaw(minetest.dir_to_yaw(cardinal))
        end
    elseif self.climb_wander > 0 and self.steps_taken % 3 == 0 then
        -- wander a bit while climbing
        self:pick_random_horizontal()
    end







    -- Adjust height to follow terrain
    self:adjust_height()

    -- Update digger cooldown
    self.dig_cooldown = math.max(0, (self.dig_cooldown or 0) - dtime)
    
    -- Only dig/move if cooldown has expired (1 second)
    if self.dig_cooldown > 0 then
        return
    end
    
    -- If returning with full inventory, find hub
    if self.returning and self.inventory.regolith > 0 then
        local hub_pos = self:find_nearest_hub()
        
        if hub_pos then
            local pos = self.object:get_pos()
            local dist = vector.distance(pos, hub_pos)
            
            if dist < 1.5 then
                -- Close enough to deposit resources
                self:deposit_resources(hub_pos)
                self.returning = false
            else
                -- Move toward hub
                local dir = vector.direction(pos, hub_pos)
                dir.y = 0  -- Force horizontal movement
                
                -- Convert to cardinal direction for movement
                local cardinal_dir = {x=0, y=0, z=0}
                if math.abs(dir.x) > math.abs(dir.z) then
                    cardinal_dir.x = dir.x > 0 and 1 or -1
                else
                    cardinal_dir.z = dir.z > 0 and 1 or -1
                end
                
                -- Update rover direction
                self.current_direction = cardinal_dir
                
                -- Set facing direction
                local yaw = minetest.dir_to_yaw(self.current_direction)
                self.object:set_yaw(yaw)
                
                -- Dig/move toward hub
                self:dig_block()
                
                -- Set cooldown
                self.dig_cooldown = 1.0
            end
            return
        else
            -- No hub found, continue normal digging
            self.returning = false
        end
    end
    
    -- Check for ice first
    local ice_pos = self:find_ice()
    
    if ice_pos then
        -- Dig toward ice
        if self:dig_toward_ice(ice_pos) then
            -- Set cooldown to 1 second per digging action
            self.dig_cooldown = 1.0
        end
    else
        -- Normal digging in current direction
        if self:dig_block() then
            -- Set cooldown to 1 second per digging action
            self.dig_cooldown = 1.0
        end
    end
    
    -- Zero velocity while not moving (between digs)
    self.object:set_velocity({x=0, y=0, z=0})
end

-----------------------------------------------------------------
-- Keep your full on_step exactly as before.
-- (It already calls functions we imported above.)
-----------------------------------------------------------------

-- Paste on_step here, deleting any code that
-- duplicated definitions now living in modules.
-----------------------------------------------------------------

minetest.register_entity("moon:ant", ant)
-- ant/movement.lua
local C = dofile(minetest.get_modpath(minetest.get_current_modname()).."/ant/constants.lua")

local M = {}

-- random cardinal start
function M.choose_initial_direction(self)
	local dirs = { {x=1,y=0,z=0}, {x=-1,y=0,z=0}, {x=0,y=0,z=1}, {x=0,y=0,z=-1} }
	self.current_direction = dirs[math.random(1,4)]
	self.steps_taken       = 0
	self.object:set_yaw(minetest.dir_to_yaw(self.current_direction))
end

function M.turn_90_degrees(self)
	local left = (math.random() > 0.7)
	local dir  = self.current_direction
	local newd = left and {x = -dir.z, y=0, z =  dir.x}
	                 or   {x =  dir.z, y=0, z = -dir.x}

	self.current_direction = newd
	self.steps_taken       = 0
	self.object:set_yaw(minetest.dir_to_yaw(newd))
end

function M.adjust_height(self)
	local pos = self.object:get_pos(); if not pos then return end
	local below = {x=pos.x, y=pos.y-0.3, z=pos.z}
	local node  = minetest.get_node_or_nil(below)
	if node and node.name == "air" then return end -- let gravity do it
	local target_y = math.floor(pos.y) + 0.5
	if math.abs(pos.y - target_y) > 0.1 then
		self.object:set_pos({x=pos.x, y=target_y, z=pos.z})
	end
end
function M.pick_random_horizontal(self)
    local dirs = { {x=1,y=0,z=0}, {x=-1,y=0,z=0}, {x=0,y=0,z=1}, {x=0,y=0,z=-1} }
    self.current_direction = dirs[math.random(1,4)]
    self.object:set_yaw(minetest.dir_to_yaw(self.current_direction))
end

return M
-- ant/resource.lua
local C = dofile(minetest.get_modpath(minetest.get_current_modname()).."/ant/constants.lua")

local R = {}

function R.find_nearest_hub(self, radius)
	radius = radius or C.HUB_SEARCH_RADIUS
	local pos = self.object:get_pos(); if not pos then return nil end
	local hubs = minetest.find_nodes_in_area(
		{x=pos.x-radius, y=pos.y-radius, z=pos.z-radius},
		{x=pos.x+radius, y=pos.y+radius, z=pos.z+radius},
		{"moon:nest_core"}
	)
	local best, bestd = nil, radius*2
	for _,hp in ipairs(hubs) do
		local d = vector.distance(pos, hp)
		if d < bestd then bestd, best = d, hp end
	end
	return best
end

function R.on_punch(self, puncher, time_from_last_punch, tool_capabilities, dir)
    local steps_text = "Steps in current direction: " .. self.steps_taken
    local inv_text = "Regolith: " .. self.inventory.regolith .. "/" .. self.max_regolith
    
    local dir_name = "Unknown"
    if self.current_direction then
        if self.current_direction.x > 0 then dir_name = "East"
        elseif self.current_direction.x < 0 then dir_name = "West"
        elseif self.current_direction.z > 0 then dir_name = "North"
        elseif self.current_direction.z < 0 then dir_name = "South"
        end
    end
    
    local status = self.returning and "Returning to hub" or "Digging"
    
    local pos = self.object:get_pos()
    local pos_text = "Position: " .. minetest.pos_to_string(pos)
    
    minetest.chat_send_player(puncher:get_player_name(), 
        "Rover Status: " .. status .. "\n" .. 
        inv_text .. "\n" .. 
        steps_text .. "\nDirection: " .. dir_name .. 
        "\n" .. pos_text)
    return true
end

return R
